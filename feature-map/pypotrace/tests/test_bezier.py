import numpy as np
import potrace
from PIL import Image
from PIL import ImageDraw


adaptive = \
[[ 13.31417446,  23.4900536 ],
 [ 12.20495274,  22.94905765],
 [ 10.4881329,   21.41537576],
 [  9.36908006,  19.48807348],
 [  8.84314831,  17.33204811],
 [  8.90569174,  15.11219696],
 [  9.55206442,  12.99341733],
 [ 10.77762044,  11.14060654],
 [ 12.57771388,   9.71866189],
 [ 13.71540898,   9.24905362],
 [ 13.71540898,   9.24905362],
 [ 14.95878038,   8.88032993],
 [ 17.33619353,   8.76367751],
 [ 19.50044342,   9.30445891],
 [ 21.36045485,  10.40542956],
 [ 22.82515263,  11.9693449 ],
 [ 23.80346155,  13.89896035],
 [ 24.20430642,  16.09703136],
 [ 23.93661202,  18.46631335],
 [ 23.4900536,   19.68582554],
 [ 23.4900536,   19.68582554],
 [ 22.78194571,  21.1010289 ],
 [ 20.67271536,  23.14462753],
 [ 17.95986131,  24.15882153],
 [ 14.89670995,  24.04890542],
 [ 13.31417446,  23.4900536 ]]


regular = \
[[ 13.31417446, 23.4900536 ],
 [ 11.65190728, 22.51888426],
 [ 10.37429236, 21.22192386],
 [  9.47895097, 19.68359985],
 [  8.96350443, 17.98833963],
 [  8.82557401, 16.22057063],
 [  9.062781,   14.46472026],
 [  9.67274671, 12.80521596],
 [ 10.65309241, 11.32648514],
 [ 12.00143941, 10.11295521],
 [ 13.71540898,  9.24905362],
 [ 13.71540898,  9.24905362],
 [ 15.68274205,  8.80074698],
 [ 17.55445232,  8.81676355],
 [ 19.2839093,   9.24731412],
 [ 20.82448247, 10.04260947],
 [ 22.12954135, 11.15286036],
 [ 23.15245542, 12.5282776 ],
 [ 23.84659418, 14.11907195],
 [ 24.16532713, 15.87545421],
 [ 24.06202378, 17.74763514],
 [ 23.4900536,  19.68582554],
 [ 23.4900536,  19.68582554],
 [ 22.91315459, 20.80514675],
 [ 22.19509034, 21.77643139],
 [ 21.35207374, 22.59361829],
 [ 20.40031768, 23.25064632],
 [ 19.35603504, 23.74145431],
 [ 18.23543873, 24.05998113],
 [ 17.05474163, 24.20016562],
 [ 15.83015662, 24.15594663],
 [ 14.5778966,  23.921263  ],
 [ 13.31417446, 23.4900536 ]]

def test_tesselate():
    # Make a circle
    data = np.zeros((32, 32), np.uint32)
    radius2 = 8 * 8
    for j in range(32):
        y = j - 16
        for i in range(32):
            x = i - 16
            if x * x + y * y > radius2:
                data[j, i] = 0
            else:
                data[j, i] = 1

    # Trace it
    bmp = potrace.Bitmap(data)
    path = bmp.trace()
    out = Image.new("RGB", (32, 32), (0, 0, 0))
    ImageDraw.Draw(out)
    curve = path.curves[0]
    points = curve.tesselate(curve.adaptive)
    assert np.abs(points - adaptive).sum() < 1e-6
    points = curve.tesselate(curve.regular, res=10)
    assert np.abs(points - regular).sum() < 1e-6
